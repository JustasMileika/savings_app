// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using savings_app_backend.Models;

#nullable disable

namespace savings_app_backend.Migrations
{
    [DbContext(typeof(savingsAppContext))]
    [Migration("20221021194441_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("savings_app_backend.Models.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAuthId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAuthId");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("savings_app_backend.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("buyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("pickupTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("sellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca5dbb9c-60a8-43c5-9da0-a3f0d24e5108"),
                            Status = "AwaitingPickup",
                            buyerId = new Guid("b603db5e-6f2d-4751-b3d3-d1c864db8016"),
                            pickupTimeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            productId = "fd6ad331-3d86-49d1-a6f7-f4ae85371e97",
                            sellerId = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06")
                        },
                        new
                        {
                            Id = new Guid("b335acb9-985b-47cb-bae5-eb649f3101f6"),
                            Status = "AwaitingPickup",
                            buyerId = new Guid("b603db5e-6f2d-4751-b3d3-d1c864db8016"),
                            pickupTimeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            productId = "fd6ad331-3d86-49d1-a6f7-f4ae85371e97",
                            sellerId = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06")
                        },
                        new
                        {
                            Id = new Guid("ca5dbb9c-60a8-43c5-9da0-a3f0d24e5120"),
                            Status = "AwaitingPickup",
                            buyerId = new Guid("ca5dbb9c-60a8-43c5-9da0-a3f0d24e5108"),
                            pickupTimeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            productId = "fd6ad331-3d86-49d1-a6f7-f4ae85371e97",
                            sellerId = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06")
                        },
                        new
                        {
                            Id = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            Status = "AwaitingPickup",
                            buyerId = new Guid("b335acb9-985b-47cb-bae5-eb649f3101f6"),
                            pickupTimeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            productId = "fd6ad331-3d86-49d1-a6f7-f4ae85371e97",
                            sellerId = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06")
                        });
                });

            modelBuilder.Entity("savings_app_backend.Models.Pickup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pickup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("db7d2e61-077d-40ca-a888-9e05e59dce83"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        },
                        new
                        {
                            Id = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("1163fde0-8dae-458f-8e25-860dda25dd29"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        },
                        new
                        {
                            Id = new Guid("168cba18-9541-4e71-8e5f-4c78be6a7c2c"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("1163fde0-8dae-458f-8e25-860dda25dd29"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        },
                        new
                        {
                            Id = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("168cba18-9541-4e71-8e5f-4c78be6a7c2c"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        },
                        new
                        {
                            Id = new Guid("39392fad-a761-45c1-89b9-3d26f6ac96e2"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        },
                        new
                        {
                            Id = new Guid("39392fad-a761-45c1-89b9-3d26f6ac96f1"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("db7d2e61-077d-40ca-a888-9e05e59dce83"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        },
                        new
                        {
                            Id = new Guid("39392fad-a761-45c1-89b9-3d26f6ac96b3"),
                            endTime = new DateTime(2017, 9, 8, 19, 1, 55, 0, DateTimeKind.Unspecified),
                            productId = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            startTime = new DateTime(2017, 9, 8, 19, 1, 45, 0, DateTimeKind.Unspecified),
                            status = "Available"
                        });
                });

            modelBuilder.Entity("savings_app_backend.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfUnits")
                        .HasColumnType("int");

                    b.Property<float>("AmountPerUnit")
                        .HasColumnType("real");

                    b.Property<string>("AmountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShelfLife")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            AmountOfUnits = 5,
                            AmountPerUnit = 0.5f,
                            AmountType = "kilogram",
                            Category = "Vegetable",
                            Description = ".....",
                            Name = "potatoes",
                            PictureURL = "https://media.istockphoto.com/photos/three-potatoes-picture-id157430678?k=20&m=157430678&s=612x612&w=0&h=dfYLuPYwA50ojI90hZ4jCgKZd5TGnqf24UCVBszoZIA=",
                            Price = 1.5f,
                            RestaurantID = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06"),
                            ShelfLife = new DateTime(2017, 9, 8, 19, 1, 55, 714, DateTimeKind.Local).AddTicks(9420)
                        },
                        new
                        {
                            Id = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            AmountOfUnits = 9,
                            AmountPerUnit = 2f,
                            AmountType = "kilogram",
                            Category = "Fruit",
                            Description = ".....",
                            Name = "apples",
                            PictureURL = "https://images.pexels.com/photos/2487443/pexels-photo-2487443.jpeg?cs=srgb&dl=pexels-matheus-cenali-2487443.jpg&fm=jpg",
                            Price = 3.2f,
                            RestaurantID = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            ShelfLife = new DateTime(2017, 9, 8, 19, 1, 55, 714, DateTimeKind.Local).AddTicks(9420)
                        },
                        new
                        {
                            Id = new Guid("168cba18-9541-4e71-8e5f-4c78be6a7c2c"),
                            AmountOfUnits = 13,
                            AmountPerUnit = 0.2f,
                            AmountType = "kilogram",
                            Category = "Snack",
                            Description = ".....",
                            Name = "french-fries",
                            PictureURL = "https://images.pexels.com/photos/2487443/pexels-photo-2487443.jpeg?cs=srgb&dl=pexels-matheus-cenali-2487443.jpg&fm=jpg",
                            Price = 0.5f,
                            RestaurantID = new Guid("168cba18-9541-4e71-8e5f-4c78be6a7c2c"),
                            ShelfLife = new DateTime(2017, 9, 8, 19, 1, 55, 714, DateTimeKind.Local).AddTicks(9420)
                        },
                        new
                        {
                            Id = new Guid("1163fde0-8dae-458f-8e25-860dda25dd29"),
                            AmountOfUnits = 5,
                            AmountPerUnit = 12f,
                            AmountType = "unit",
                            Category = "Protein",
                            Description = ".....",
                            Name = "eggs",
                            PictureURL = "https://images.pexels.com/photos/2487443/pexels-photo-2487443.jpeg?cs=srgb&dl=pexels-matheus-cenali-2487443.jpg&fm=jpg",
                            Price = 2.2f,
                            RestaurantID = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            ShelfLife = new DateTime(2017, 9, 8, 19, 1, 55, 714, DateTimeKind.Local).AddTicks(9420)
                        },
                        new
                        {
                            Id = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06"),
                            AmountOfUnits = 2,
                            AmountPerUnit = 1f,
                            AmountType = "kilogram",
                            Category = "Protein",
                            Description = "asdas",
                            Name = "Burger patties",
                            PictureURL = "https://media.istockphoto.com/photos/stack-of-fresh-raw-burger-patty-picture-id1268023262?k=20&m=1268023262&s=612x612&w=0&h=aLMpdDBCzc31AJPfxZOFFG90HvdaZso0fpHmaJf7fw0=",
                            Price = 5f,
                            RestaurantID = new Guid("39392fad-a761-45c1-89b9-3d26f6ac96e2"),
                            ShelfLife = new DateTime(2017, 9, 8, 19, 1, 55, 714, DateTimeKind.Local).AddTicks(9420)
                        },
                        new
                        {
                            Id = new Guid("db7d2e61-077d-40ca-a888-9e05e59dce83"),
                            AmountOfUnits = 5,
                            AmountPerUnit = 0.5f,
                            AmountType = "litre",
                            Category = "Dairy",
                            Description = ",,,,",
                            Name = "milkas",
                            PictureURL = "linkas",
                            Price = 0.8f,
                            RestaurantID = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            ShelfLife = new DateTime(2017, 9, 8, 19, 1, 55, 714, DateTimeKind.Local).AddTicks(9420)
                        });
                });

            modelBuilder.Entity("savings_app_backend.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Open")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAuthId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAuthId")
                        .IsUnique();

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06"),
                            Description = "descriptiondescr iptiondescriptiond escriptiondes criptiondescript iondescriptiondescript iondescriptio ndescriptiondescription",
                            Name = "Huye Magoos Fender",
                            Open = true,
                            Rating = 4.5,
                            ShortDescription = "______________________________",
                            SiteRef = "???",
                            UserAuthId = new Guid("b603db5e-6f2d-4751-b3d3-d1c864db8016")
                        },
                        new
                        {
                            Id = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            Description = "descriptiondescr iptiondescriptiond escriptiondes criptiondescript iondescriptiondescript iondescriptio ndescriptiondescription",
                            Name = "Barca",
                            Open = true,
                            Rating = 3.0,
                            ShortDescription = "______________________________",
                            SiteRef = "???",
                            UserAuthId = new Guid("ca5dbb9c-60a8-43c5-9da0-a3f0d24e5108")
                        },
                        new
                        {
                            Id = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            Description = "descriptiondescr iptiondescriptiond escriptiondes criptiondescript iondescriptiondescript iondescriptio ndescriptiondescription",
                            Name = "Local",
                            Open = true,
                            Rating = 4.5,
                            ShortDescription = "______________________________",
                            SiteRef = "???",
                            UserAuthId = new Guid("b335acb9-985b-47cb-bae5-eb649f3101f6")
                        },
                        new
                        {
                            Id = new Guid("168cba18-9541-4e71-8e5f-4c78be6a7c2c"),
                            Description = "descriptiondescr iptiondescriptiond escriptiondes criptiondescript iondescriptiondescript iondescriptio ndescriptiondescription",
                            Name = "Cafe Bilhanes",
                            Open = true,
                            Rating = 4.5,
                            ShortDescription = "______________________________",
                            SiteRef = "???",
                            UserAuthId = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97")
                        },
                        new
                        {
                            Id = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d05"),
                            Description = "descriptiondescr iptiondescriptiond escriptiondes criptiondescript iondescriptiondescript iondescriptio ndescriptiondescription",
                            Name = "Ba2rca",
                            Open = true,
                            Rating = 4.0999999999999996,
                            ShortDescription = "______________________________",
                            SiteRef = "???",
                            UserAuthId = new Guid("1163fde0-8dae-458f-8e25-860dda25dd29")
                        },
                        new
                        {
                            Id = new Guid("39392fad-a761-45c1-89b9-3d26f6ac96e2"),
                            Description = "descriptiondescr iptiondescriptiond escriptiondes criptiondescript iondescriptiondescript iondescriptio ndescriptiondescription",
                            Name = "Corner Bistro",
                            Open = true,
                            Rating = 4.5,
                            ShortDescription = "______________________________",
                            SiteRef = "???",
                            UserAuthId = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02")
                        });
                });

            modelBuilder.Entity("savings_app_backend.Models.UserAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAuth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b603db5e-6f2d-4751-b3d3-d1c864db8016"),
                            Email = "aaaaa@gmail.com",
                            Password = "aaaaaaa"
                        },
                        new
                        {
                            Id = new Guid("ca5dbb9c-60a8-43c5-9da0-a3f0d24e5108"),
                            Email = "bbb@gmail.com",
                            Password = "bbbbbbbbb"
                        },
                        new
                        {
                            Id = new Guid("b335acb9-985b-47cb-bae5-eb649f3101f6"),
                            Email = "User1@gmail.com",
                            Password = "USER"
                        },
                        new
                        {
                            Id = new Guid("fd6ad331-3d86-49d1-a6f7-f4ae85371e97"),
                            Email = "TestRest@mail.ru",
                            Password = "qwert"
                        },
                        new
                        {
                            Id = new Guid("1163fde0-8dae-458f-8e25-860dda25dd29"),
                            Email = "asdasd@gmail.com",
                            Password = "aadsadas"
                        },
                        new
                        {
                            Id = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f02"),
                            Email = "asdasd@gmail.com",
                            Password = "a"
                        },
                        new
                        {
                            Id = new Guid("42fd75ec-1d4d-40ee-ae0a-e3ab79c69f33"),
                            Email = "email@email.com",
                            Password = "password"
                        },
                        new
                        {
                            Id = new Guid("168cba18-9541-4e71-8e5f-4c78be6a7c2c"),
                            Email = "kazkas@email.com",
                            Password = "password"
                        },
                        new
                        {
                            Id = new Guid("a2e5346e-b246-4578-b5cd-993af7f77d06"),
                            Email = "kaz@kas@email.com",
                            Password = "password"
                        },
                        new
                        {
                            Id = new Guid("39392fad-a761-45c1-89b9-3d26f6ac96e2"),
                            Email = "kazkascia@email.com",
                            Password = "password"
                        },
                        new
                        {
                            Id = new Guid("91227b09-b2a6-474d-a396-acb0a8a39f1b"),
                            Email = "hello@gmail.com",
                            Password = "Hello@1458"
                        },
                        new
                        {
                            Id = new Guid("7b3ed2a5-4257-48a8-ae1a-13da39e343d8"),
                            Email = "asaasddf@gmail.com",
                            Password = "klkl@1KL"
                        },
                        new
                        {
                            Id = new Guid("8b2ea1b7-12f8-4afc-9064-25181379ae30"),
                            Email = "asaasddddf@gmail.com",
                            Password = "klkl@1KL"
                        });
                });

            modelBuilder.Entity("savings_app_backend.Models.Buyer", b =>
                {
                    b.HasOne("savings_app_backend.Models.UserAuth", "UserAuth")
                        .WithMany()
                        .HasForeignKey("UserAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuth");
                });

            modelBuilder.Entity("savings_app_backend.Models.Restaurant", b =>
                {
                    b.HasOne("savings_app_backend.Models.UserAuth", "UserAuth")
                        .WithOne()
                        .HasForeignKey("savings_app_backend.Models.Restaurant", "UserAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuth");
                });
#pragma warning restore 612, 618
        }
    }
}
